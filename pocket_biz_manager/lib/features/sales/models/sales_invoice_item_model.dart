class SalesInvoiceItem {
  final int? invoiceItemID; // Primary Key, usually auto-generated by DB
  final int? productID; // Foreign Key to Products table
  final String productName; // Storing for display convenience, though productID is key
  final double quantity;
  final double unitPrice;
  final double lineTotal;

  SalesInvoiceItem({
    this.invoiceItemID,
    required this.productID, // Made required, as it's crucial for stock and records
    required this.productName,
    required this.quantity,
    required this.unitPrice,
  }) : lineTotal = double.parse((quantity * unitPrice).toStringAsFixed(2)); // Ensure 2 decimal places

  // toMap is used when saving to the Sales_Invoice_Items table
  // It requires invoiceID which is known at the time of saving the whole invoice.
  Map<String, dynamic> toMap(int invoiceID) {
    return {
      // 'InvoiceItemID': invoiceItemID, // DB handles auto-increment
      'InvoiceID': invoiceID,
      'ProductID': productID,
      // ProductName is not part of the Sales_Invoice_Items table schema,
      // it's derived from ProductID or stored in the model for convenience.
      'Quantity': quantity,
      'UnitPrice': unitPrice,
      'LineTotal': lineTotal,
    };
  }

  // fromMap is used when fetching from the Sales_Invoice_Items table
  factory SalesInvoiceItem.fromMap(Map<String, dynamic> map) {
    return SalesInvoiceItem(
      invoiceItemID: map['InvoiceItemID'],
      productID: map['ProductID'],
      // ProductName would typically be joined from the Products table or fetched separately.
      // If it's stored in the item for convenience during creation, it might not be in the DB map.
      // For now, let's assume we need a way to get it, or it's passed if available.
      productName: map['ProductName'] ?? '', // Placeholder if not joined
      quantity: (map['Quantity'] as num).toDouble(),
      unitPrice: (map['UnitPrice'] as num).toDouble(),
      // lineTotal is calculated, but can also be stored/retrieved.
      // lineTotal: (map['LineTotal'] as num).toDouble(),
    );
  }

  SalesInvoiceItem copyWith({
    int? invoiceItemID,
    int? productID,
    String? productName,
    double? quantity,
    double? unitPrice,
  }) {
    return SalesInvoiceItem(
      invoiceItemID: invoiceItemID ?? this.invoiceItemID,
      productID: productID ?? this.productID,
      productName: productName ?? this.productName,
      quantity: quantity ?? this.quantity,
      unitPrice: unitPrice ?? this.unitPrice,
    );
  }
}
